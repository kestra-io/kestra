plugins {
    // micronaut
    id "java"
    id 'java-library'
    id "idea"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"

    // test
    id 'com.adarshr.test-logger' version '2.0.0'
    id 'org.gradle.test-retry' version '1.0.0'

    // helper
    id "com.github.ben-manes.versions" version "0.27.0"

    // front
    id 'org.siouan.frontend' version '1.3.0' apply false

    // release
    id "com.jfrog.bintray" version "1.8.4" apply false
    id 'net.researchgate.release' version '2.8.1'
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

/**********************************************************************************************************************\
 * Main
 **********************************************************************************************************************/
mainClassName = "org.kestra.cli.App"
sourceCompatibility = 11

dependencies {
    compile project(":cli")
    testCompile project(":cli")
}

/**********************************************************************************************************************\
 * Dependencies
 **********************************************************************************************************************/
allprojects {
    group "org.kestra"

    sourceCompatibility = 11

    repositories {
        mavenCentral()
        maven { url "https://jcenter.bintray.com" }
    }

    // micronaut
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "idea"

    configurations {
        developmentOnly // for dependencies that are needed for development only
    }

    // dependencies
    dependencies {
        // lombok
        annotationProcessor "org.projectlombok:lombok:" + lombokVersion
        compileOnly 'org.projectlombok:lombok:' + lombokVersion

        // micronaut
        annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
        annotationProcessor "io.micronaut:micronaut-inject-java"
        annotationProcessor "io.micronaut:micronaut-validation"
        implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
        implementation "io.micronaut:micronaut-inject"
        implementation "io.micronaut:micronaut-validation"
        implementation "io.micronaut:micronaut-runtime"
        implementation "javax.annotation:javax.annotation-api"
        implementation 'io.micronaut:micronaut-views'
        implementation "io.micronaut.data:micronaut-data-model"
        implementation "io.micronaut:micronaut-management"
        implementation "io.micronaut.configuration:micronaut-micrometer-core"
        implementation "io.micrometer:micrometer-core:1.4.2"
        implementation "io.micronaut.configuration:micronaut-micrometer-registry-prometheus"
        api "io.micronaut:micronaut-http-client"

        // logs
        runtime "ch.qos.logback:logback-classic:1.2.3"
        runtime group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.12.1'

        // jackson
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.1'
        implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.10.1'
        implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names', version: '2.10.1'
        implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-guava', version: '2.10.1'

        // kestra
        implementation group: 'com.devskiller.friendly-id', name: 'friendly-id', version: '1.1.0'
        implementation 'com.github.jknack:handlebars:4.1.2'

        // exposed utils
        api group: 'com.google.guava', name: 'guava', version: '28.1-jre'
        api group: 'commons-io', name: 'commons-io', version: '2.6'
        api group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    }
}

/**********************************************************************************************************************\
 * Test
 **********************************************************************************************************************/
subprojects {
    apply plugin: "com.adarshr.test-logger"
    apply plugin: "org.gradle.test-retry"

    dependencies {
        // lombok
        testAnnotationProcessor "org.projectlombok:lombok:" + lombokVersion
        testCompileOnly 'org.projectlombok:lombok:' + lombokVersion

        // micronaut
        testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
        testAnnotationProcessor "io.micronaut:micronaut-inject-java"
        testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")

        testImplementation "org.junit.jupiter:junit-jupiter-api"
        testImplementation "io.micronaut.test:micronaut-test-junit5"
        testImplementation "org.junit.jupiter:junit-jupiter-engine"
        testImplementation "org.junit.jupiter:junit-jupiter-params"

        // hamcrest
        testImplementation 'org.hamcrest:hamcrest:2.2'
        testImplementation 'org.hamcrest:hamcrest-library:2.2'
        testImplementation group: 'org.exparity', name: 'hamcrest-date', version: '2.0.7'
    }

    test {
        useJUnitPlatform()

        retry {
            maxRetries = 5
            maxFailures = 15
        }
    }

    testlogger {
        theme 'mocha-parallel'
        showExceptions true
        showFullStackTraces true
        showCauses true
        slowThreshold 2000
        showStandardStreams true
        showPassedStandardStreams false
        showSkippedStandardStreams true
    }
}

/**********************************************************************************************************************\
 * Micronaut
 **********************************************************************************************************************/
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add("-parameters")
}

run.classpath += configurations.developmentOnly
test.classpath += configurations.developmentOnly

run.jvmArgs(
    "-noverify",
    "-XX:TieredStopAtLevel=1",
    "-Dcom.sun.management.jmxremote",
    '-Dmicronaut.environments=dev,override'
)

/**********************************************************************************************************************\
 * Jar
 **********************************************************************************************************************/
jar {
    manifest {
        attributes (
            "Main-Class": mainClassName,
                "X-Kestra-Title": project.name,
                "X-Kestra-Group": project.group,
                "X-Kestra-Version": project.version
        )
    }
}

shadowJar {
    dependsOn = ['ui:assembleFrontend']

    archiveClassifier.set(null)
    mergeServiceFiles()
}

/**********************************************************************************************************************\
 * Executable Jar
 **********************************************************************************************************************/
def executableDir = file("${buildDir}/executable")
def executable = file("${buildDir}/executable/${project.name}-${project.version}")

task writeExecutableJar()  {
    group "build"
    description "Write an executable jar from shadow jar"
    dependsOn = [shadowJar]

    doFirst {
        executableDir.mkdirs()
    }

    doLast {
        executable.write("")
        executable.append("\n: <<END_OF_KESTRA_SELFRUN\r\n")
        executable.append(file("gradle/jar/selfrun.bat").readBytes())
        executable.append("\r\nEND_OF_KESTRA_SELFRUN\r\n\n")
        executable.append(file("gradle/jar/selfrun.sh").readBytes())
        executable.append(file("${buildDir}/libs/${project.name}-${project.version}.jar").readBytes())
        executable.setExecutable(true)
    }

}

task executableJar(type: Zip) {
    group "build"
    description "Zip the executable jar"
    dependsOn = [writeExecutableJar]

    archiveFileName = "${project.name}-${project.version}.zip"
    destinationDirectory = file("${buildDir}/archives")

    from executableDir
    archiveClassifier.set(null)
}

/**********************************************************************************************************************\
 * Jacoco
 **********************************************************************************************************************/
subprojects {
    apply plugin: "jacoco"

    test {
        finalizedBy jacocoTestReport
    }

    jacoco {
        toolVersion = "0.8.4"
    }

    jacocoTestReport {
        getAdditionalSourceDirs().setFrom(files(sourceSets.main.allSource.srcDirs))
        getSourceDirectories().setFrom(files(sourceSets.main.allSource.srcDirs))
        getClassDirectories().setFrom(files(sourceSets.main.output))
    }
}

task jacoco(type: JacocoReport) {
    dependsOn = subprojects.test

    getAdditionalSourceDirs().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    getSourceDirectories().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    getClassDirectories().setFrom(files(subprojects.sourceSets.main.output))
    getExecutionData().setFrom(files(subprojects.jacocoTestReport.executionData))

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = true
    }
}

/**********************************************************************************************************************\
 * Standalone
 **********************************************************************************************************************/
task runStandalone(type: JavaExec) {
    group = "application"
    classpath = project(":cli").sourceSets.main.runtimeClasspath
    main = mainClassName
    args 'server', 'standalone'
}

/**********************************************************************************************************************\
 * Publish
 **********************************************************************************************************************/

subprojects {
    javadoc {
        options {
            locale = 'en_US'
            encoding = 'UTF-8'
        }
    }

    task sourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        archiveClassifier.set('javadoc')
        from javadoc
    }

    ext {
        isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")
        if (isBuildSnapshot) {
            project.version = project.version.replaceAll(/-SNAPSHOT$/, "")
        }
    }

    apply plugin: "maven-publish"
    apply plugin: "com.jfrog.bintray"

    publishing {
        publications {
            BintrayMavenPublication(MavenPublication) {
                version project.version

                if (project.name.contains('cli')) {
                    groupId "org.kestra"
                    artifactId "kestra"

                    artifact shadowJar
                    artifact executableJar
                } else {
                    from components.java

                    groupId project.group
                    artifactId project.name

                    artifact sourcesJar
                    artifact javadocJar
                }

            }

        }
    }

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        publications = ['BintrayMavenPublication']
        publish = true
        dryRun = false
        override = isBuildSnapshot ? true : false
        pkg {
            userOrg = 'kestra'
            name = project.name.contains('cli') ? "kestra" : project.name
            repo = project.ext.isBuildSnapshot ? 'maven-snapshot' : 'maven'
            websiteUrl = 'https://kestra.io'
            issueTrackerUrl = 'https://github.com/kestra-io/kestra/issues'
            vcsUrl = 'https://github.com/kestra-io/kestra'
            licenses = ['Apache-2.0']
            publicDownloadNumbers = true
            githubRepo = 'kestra-io/kestra'
            githubReleaseNotesFile = 'README.md'
            version {
                name = project.version
                released = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
                vcsTag = "v" + project.version
            }
        }
    }
}


/**********************************************************************************************************************\
 * Version
 **********************************************************************************************************************/
release {
    preCommitText = 'chore(version):'
    preTagCommitMessage = 'update to version'
    tagCommitMessage = 'tag version'
    newVersionCommitMessage = 'update snapshot version'
    tagTemplate = 'v${version}'
    pushReleaseVersionBranch = 'master'

    git {
        requireBranch = 'develop'
    }
}
