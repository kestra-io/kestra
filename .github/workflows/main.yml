name: Main

on:
  push:
    branches:
      - master
      - develop
      - release
    tags:
      - v*

  pull_request:
    branches:
      - master
      - develop
      - release
  repository_dispatch:
    types: [rebuild]
  workflow_dispatch:


jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        java: ['11']

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          architecture: 'x64'
      - uses: actions/setup-node@v1
        with:
          node-version: '12'
          check-latest: true

      # Services
      - name: Build the docker-compose stack
        run: docker-compose -f docker-compose-ci.yml up -d

      # Caches
      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Npm cache
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Node cache
        uses: actions/cache@v1
        with:
          path: node
          key: ${{ runner.os }}-node-${{ hashFiles('ui/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # JDK
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}

      # Gradle check
      - name: Build with Gradle
        env:
          GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
        run: |
          python3 -m pip install virtualenv
          echo $GOOGLE_SERVICE_ACCOUNT | base64 -d > ~/.gcp-service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS=$HOME/.gcp-service-account.json
          ./gradlew classes testClasses --parallel --no-daemon
          ./gradlew check jacoco --no-daemon
        # --parallel

      # Codecov
      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
#          directory: ./build/reports/jacoco/jacoco/html/index.html

      # Shadow Jar
      - name: Build jars
        if: success() && matrix.java == '11'
        run: ./gradlew executableJar --no-daemon

      # Publish
      - name: Publish package to Bintray
        if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master'
        env:
          BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
          BINTRAY_KEY: ${{ secrets.BINTRAY_KEY }}
        run: ./gradlew bintrayUpload --parallel --no-daemon

      # Upload artifacts
      - name: Upload jar
        uses: actions/upload-artifact@v1
        if: success() && matrix.java == '11'
        with:
          name: jar
          path: build/libs/

      - name: Upload Executable
        uses: actions/upload-artifact@v1
        if: success() && matrix.java == '11'
        with:
          name: exe
          path: build/executable/

      # Slack
      - name: Slack notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          job_name: Check
          fields: repo,message,author,action,ref,job,took
          username: Github Actions
          icon_emoji: ':octocat:'
          channel: '#kestra'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }}

  docker:
    name: Publish docker
    runs-on: ubuntu-latest
    needs: check
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/release' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2

      # Artifact
      - name: Download executable
        uses: actions/download-artifact@v1
        with:
          name: exe

      - name: Copy exe to image
        run: |
          cp exe/* docker/app/kestra && chmod +x docker/app/kestra

      # Vars
      - name: Set image name
        id: vars
        run: |
          TAG=${GITHUB_REF#refs/*/}
          if [[ $TAG = "master" ]]
          then
            echo ::set-output name=tag::latest
            echo ::set-output name=plugins::
          else
            echo ::set-output name=tag::${TAG}
            echo ::set-output name=plugins::--repositories=https://dl.bintray.com/kestra/maven-snapshot
          fi

      # Docker
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ format('kestra/kestra:{0}', steps.vars.outputs.tag) }}

      - name: Push to Docker Hub Full
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ format('kestra/kestra:{0}-full', steps.vars.outputs.tag) }}
          build-args: |
            KESTRA_PLUGINS=${{ steps.vars.outputs.plugins }} org.kestra.storage.gcs:storage-gcs:LATEST org.kestra.storage.minio:storage-minio:LATEST org.kestra.task.aws:task-aws:LATEST org.kestra.task.fs:task-fs:LATEST org.kestra.task.gcp:task-gcp:LATEST org.kestra.task.kubernetes:task-kubernetes:LATEST org.kestra.task.serdes:task-serdes:LATEST org.kestra.task.notifications:task-notifications:LATEST org.kestra.task.crypto:task-crypto:LATEST org.kestra.task.jdbc:mysql:LATEST org.kestra.task.jdbc:postgres:LATEST org.kestra.task.jdbc:vertica:LATEST org.kestra.task.jdbc:clickhouse:LATEST
            APT_PACKAGES=python3-pip python3-wheel python3-setuptools python3-virtualenv nodejs

      # Slack
      - name: Slack notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          job_name: Publish docker
          fields: repo,commit,action,ref,job,took
          username: Github Actions
          icon_emoji: ':octocat:'
          channel: '#kestra'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
