micronaut:
  application:
    name: kestra
  router:
    static-resources:
      swagger:
        paths: classpath:META-INF/swagger
        mapping: /swagger/**
      ui:
        paths: classpath:ui
        mapping: /ui/**
      static:
        paths: classpath:static
        mapping: /static/**
  server:
    max-request-size: 10GB
    multipart:
      max-file-size: 10GB
      disk: true
    read-idle-timeout: 60m
    write-idle-timeout: 60m
    idle-timeout: 60m
    netty:
      max-chunk-size: 10MB
      responses:
        file:
          cache-seconds: 86400
          cache-control:
            public: true

      # Access log configuration, see https://docs.micronaut.io/latest/guide/index.html#accessLogger
      access-logger:
        enabled: true
        logger-name: io.kestra.webserver.access
        log-format: "[Date: %{yyyy-MM-dd'T'HH:mm:ss.SSSSSSSSS'Z'}t] [Duration: %D ms] [Method: %m] [Url: %x] [Status: %s] [Length: %b] [Ip: %a] [Port: %p]"
        exclusions:
          - /ui/.+
  caches:
    default:
      maximum-weight: 10485760

  http:
    services:
      api:
        url: https://api.kestra.io

      remote-api:
        read-idle-timeout: 180s
        connect-timeout: 180s
        read-timeout: 180s

      proxy:
        read-idle-timeout: 180s
        connect-timeout: 180s
        read-timeout: 180s

  # By default, Micronaut uses a scheduled executor with 2*nbProc for @Scheduled which is a lot as we didn't use much scheduling tasks.
  # Using core-pool-size to set the minimum nb threads to keep when idle instead.
  executors:
    scheduled:
      type: scheduled
      core-pool-size: 1

jackson:
  serialization:
    writeDatesAsTimestamps: false
    writeDurationsAsTimestamps: false
  serialization-inclusion: non_default
  deserialization:
    FAIL_ON_UNKNOWN_PROPERTIES: false

endpoints:
  all:
    port: 8081
    enabled: true
    sensitive: false
  health:
    details-visible: ANONYMOUS
  loggers:
    write-sensitive: false
  env:
    enabled: true

flyway:
  datasources:
    postgres:
      enabled: true
      locations:
        - classpath:migrations/postgres
      # We must ignore missing migrations as we delete some wrong or not used anymore migrations
      ignore-migration-patterns: "*:missing,*:future"
      out-of-order: true
    mysql:
      enabled: true
      locations:
        - classpath:migrations/mysql
      # We must ignore missing migrations as we delete some wrong or not used anymore migrations
      ignore-migration-patterns: "*:missing,*:future"
      out-of-order: true
    h2:
      enabled: true
      locations:
        - classpath:migrations/h2
      # We must ignore missing migrations as we delete some wrong or not used anymore migrations
      ignore-migration-patterns: "*:missing,*:future"
      out-of-order: true

kestra:
  retries:
    attempts: 5
    multiplier: 2.0
    delay: 1s
    maxDelay: ""

  jdbc:
    tables:
      queues:
        table: "queues"
      flows:
        table: "flows"
        cls: io.kestra.core.models.flows.Flow
      executions:
        table: "executions"
        cls: io.kestra.core.models.executions.Execution
      templates:
        table: "templates"
        cls: io.kestra.core.models.templates.Template
      triggers:
        table: "triggers"
        cls: io.kestra.core.models.triggers.Trigger
      logs:
        table: "logs"
        cls: io.kestra.core.models.executions.LogEntry
      metrics:
        table: "metrics"
        cls: io.kestra.core.models.executions.MetricEntry
      multipleconditions:
        table: "multipleconditions"
        cls: io.kestra.core.models.triggers.multipleflows.MultipleConditionWindow
      subflow_executions:
        table: "subflow_executions"
        cls: io.kestra.core.runners.SubflowExecution
      executorstate:
        table: "executorstate"
        cls: io.kestra.core.runners.ExecutorState
      executordelayed:
        table: "executordelayed"
        cls: io.kestra.core.runners.ExecutionDelay
      settings:
        table: "settings"
        cls: io.kestra.core.models.Setting
      flowtopologies:
        table: "flow_topologies"
        cls: io.kestra.core.models.topologies.FlowTopology
      workerinstance:
        cls: io.kestra.core.runners.WorkerInstance
        table: "worker_instance"
      workerjobrunning:
        cls: io.kestra.core.runners.WorkerJobRunning
        table: "worker_job_running"
      executionqueued:
        table: "execution_queued"
        cls: io.kestra.core.runners.ExecutionQueued

    queues:
      min-poll-interval: 25ms
      max-poll-interval: 1000ms
      poll-switch-interval: 5s

    cleaner:
      initial-delay: 1h
      fixed-delay: 1h
      retention: 7d

  plugins:
    repositories:
      central:
        url: https://repo.maven.apache.org/maven2/
    configurations:
      - type: io.kestra.core.tasks.flows.Subflow
        values:
          outputs:
            enabled: true # backward-compatibility with version prior to v0.15.0
      - type: io.kestra.core.tasks.flows.Flow
        values:
          outputs:
            enabled: true # backward-compatibility with version prior to v0.15.0
  variables:
    env-vars-prefix: KESTRA_
    cache-enabled: true
    cache-size: 1000

  metrics:
    prefix: kestra

  server:
    basic-auth:
      enabled: false
      # These URLs will not be authenticated, by default we open some of the Micronaut default endpoints but not all for security reasons
      open-urls:
        - "/ping"
        - "/api/v1/executions/webhook/"
    preview:
      initial-rows: 100
      max-rows: 5000

  anonymous-usage-report:
    enabled: true
    uri: https://api.kestra.io/v1/reports/usages
    initial-delay: 5m
    fixed-delay: 1h

  heartbeat:
    frequency: 10s
    heartbeat-missed: 3
