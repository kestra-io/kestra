import net.e175.klaus.zip.ZipPrefixer

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "net.e175.klaus:zip-prefixer:0.3.1"
    }
}

plugins {
    // micronaut
    id "java"
    id 'java-library'
    id "idea"
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "application"

    // test
    id "com.adarshr.test-logger" version "4.0.0"
    id "org.sonarqube" version "5.1.0.4882"
    id 'jacoco-report-aggregation'

    // helper
    id "com.github.ben-manes.versions" version "0.51.0"

    // front
    id 'org.siouan.frontend-jdk17' version '8.1.0' apply false

    // release
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
    id 'net.researchgate.release' version '3.0.2'
    id "com.gorylenko.gradle-git-properties" version "2.4.2"
    id 'signing'
    id 'ru.vyarus.pom' version '3.0.0' apply false
    id 'ru.vyarus.github-info' version '2.0.0' apply false

    // OWASP dependency check
    id "org.owasp.dependencycheck" version "10.0.3" apply false
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

/**********************************************************************************************************************\
 * Main
 **********************************************************************************************************************/
mainClassName = "io.kestra.cli.App"
sourceCompatibility = 21
targetCompatibility = 21

dependencies {
    implementation project(":cli")
    testImplementation project(":cli")
}

/**********************************************************************************************************************\
 * Dependencies
 **********************************************************************************************************************/
allprojects {
    if (it.name != 'platform') {
        group "io.kestra"

        sourceCompatibility = 21
        targetCompatibility = 21

        repositories {
            mavenCentral()
        }

        // micronaut
        apply plugin: "java"
        apply plugin: "java-library"
        apply plugin: "idea"
        apply plugin: "jacoco"

        configurations {
            developmentOnly // for dependencies that are needed for development only
            micronaut
        }

        // dependencies
        dependencies {
            // Platform
            annotationProcessor enforcedPlatform(project(":platform"))
            implementation enforcedPlatform(project(":platform"))
            api enforcedPlatform(project(":platform"))
            micronaut enforcedPlatform(project(":platform"))

            // lombok
            annotationProcessor "org.projectlombok:lombok"
            compileOnly 'org.projectlombok:lombok'

            // micronaut
            annotationProcessor "io.micronaut:micronaut-inject-java"
            annotationProcessor "io.micronaut.validation:micronaut-validation-processor"
            micronaut "io.micronaut:micronaut-inject"
            micronaut "io.micronaut.validation:micronaut-validation"
            micronaut "io.micronaut.beanvalidation:micronaut-hibernate-validator"
            micronaut "io.micronaut:micronaut-runtime"
            micronaut "io.micronaut:micronaut-retry"
            micronaut "io.micronaut:micronaut-jackson-databind"
            micronaut "io.micronaut.data:micronaut-data-model"
            micronaut "io.micronaut:micronaut-management"
            micronaut "io.micrometer:micrometer-core"
            micronaut "io.micronaut.micrometer:micronaut-micrometer-registry-prometheus"
            micronaut "io.micronaut:micronaut-http-client"
            micronaut "io.micronaut.reactor:micronaut-reactor-http-client"

            // logs
            implementation "org.slf4j:slf4j-api"
            implementation "ch.qos.logback:logback-classic"
            implementation "org.codehaus.janino:janino"
            implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j'
            implementation group: 'org.slf4j', name: 'jul-to-slf4j'
            implementation group: 'org.slf4j', name: 'jcl-over-slf4j'
            implementation group: 'org.fusesource.jansi', name: 'jansi'

            // jackson
            implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core'
            implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
            implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations'
            implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml'
            implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names'
            implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-guava'
            implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310'

            // kestra
            implementation group: 'com.devskiller.friendly-id', name: 'friendly-id'
            implementation (group: 'net.thisptr', name: 'jackson-jq') {
                exclude group: 'com.fasterxml.jackson.core'
            }

            // exposed utils
            api group: 'com.google.guava', name: 'guava'
            api group: 'commons-io', name: 'commons-io'
            api group: 'org.apache.commons', name: 'commons-lang3'
            api "io.swagger.core.v3:swagger-annotations"
        }
    }
}

/**********************************************************************************************************************\
 * Test
 **********************************************************************************************************************/
subprojects {
    if (it.name != 'platform') {
        apply plugin: "com.adarshr.test-logger"

        sourceCompatibility = 21
        targetCompatibility = 21

        dependencies {
            // Platform
            testAnnotationProcessor enforcedPlatform(project(":platform"))
            testImplementation enforcedPlatform(project(":platform"))

            // lombok
            testAnnotationProcessor "org.projectlombok:lombok:"
            testCompileOnly 'org.projectlombok:lombok'

            // micronaut
            testAnnotationProcessor "io.micronaut:micronaut-inject-java"
            testAnnotationProcessor "io.micronaut.validation:micronaut-validation-processor"
            testImplementation "io.micronaut.test:micronaut-test-junit5"

            testImplementation "org.junit.jupiter:junit-jupiter-engine"
            testImplementation "org.junit.jupiter:junit-jupiter-params"
            testImplementation "org.junit-pioneer:junit-pioneer"
            testImplementation 'org.mockito:mockito-junit-jupiter'

            // hamcrest
            testImplementation 'org.hamcrest:hamcrest'
            testImplementation 'org.hamcrest:hamcrest-library'
            testImplementation 'org.exparity:hamcrest-date'
        }

        test {
            useJUnitPlatform()

            maxHeapSize = "4048m"

            // configure en_US default locale for tests
            systemProperty 'user.language', 'en'
            systemProperty 'user.country', 'US'

            environment 'SECRET_MY_SECRET', "{\"secretKey\":\"secretValue\"}".bytes.encodeBase64().toString()
            environment 'SECRET_NEW_LINE', "cGFzc3dvcmR2ZXJ5dmVyeXZleXJsb25ncGFzc3dvcmR2ZXJ5dmVyeXZleXJsb25ncGFzc3dvcmR2\nZXJ5dmVyeXZleXJsb25ncGFzc3dvcmR2ZXJ5dmVyeXZleXJsb25ncGFzc3dvcmR2ZXJ5dmVyeXZl\neXJsb25n"
            environment 'SECRET_WEBHOOK_KEY', "secretKey".bytes.encodeBase64().toString()
            environment 'SECRET_NON_B64_SECRET', "some secret value"
            environment 'SECRET_PASSWORD', "cGFzc3dvcmQ="
            environment 'KESTRA_TEST1', "true"
            environment 'KESTRA_TEST2', "Pass by env"
        }

        testlogger {
            theme 'mocha-parallel'
            showExceptions true
            showFullStackTraces true
            showCauses true
            slowThreshold 2000
            showStandardStreams true
            showPassedStandardStreams false
            showSkippedStandardStreams true
        }
    }
}

/**********************************************************************************************************************\
 * End-to-End Tests
 **********************************************************************************************************************/
def e2eTestsCheck = tasks.register('e2eTestsCheck') {
    group = 'verification'
    description = "Runs the 'check' task for all e2e-tests modules"
    doFirst {
        project.ext.set("e2e-tests", true)
    }
}

subprojects {
    // Add e2e-tests modules check tasks to e2eTestsCheck
    if (project.name.startsWith("e2e-tests")) {
        test {
            onlyIf {
                project.hasProperty("e2e-tests")
            }
        }
    }

    afterEvaluate {
        // Add e2e-tests modules check tasks to e2eTestsCheck
        if (project.name.startsWith("e2e-tests")) {
            e2eTestsCheck.configure {
                finalizedBy(check)
            }
        }
    }
}

/**********************************************************************************************************************\
 * Allure Reports
 **********************************************************************************************************************/
subprojects {
    if (it.name != 'platform') {
        dependencies {
            testImplementation platform("io.qameta.allure:allure-bom")
            testImplementation "io.qameta.allure:allure-junit5"
        }

        configurations {
            agent {
                canBeResolved = true
                canBeConsumed = true
            }
        }

        dependencies {
            agent "org.aspectj:aspectjweaver:1.9.22.1"
        }

        test {
            jvmArgs = ["-javaagent:${configurations.agent.singleFile}"]
        }
    }
}

/**********************************************************************************************************************\
 * Jacoco
 **********************************************************************************************************************/
subprojects {
    if (it.name != 'platform') {
        apply plugin: 'jacoco'

        test {
            finalizedBy jacocoTestReport
        }

        jacocoTestReport {
            dependsOn test
        }
    }
}

tasks.named('check') {
    dependsOn tasks.named('testCodeCoverageReport', JacocoReport)
}

tasks.named('testCodeCoverageReport') {
    dependsOn ':core:copyGradleProperties'
    dependsOn ':ui:assembleFrontend'
}

/**********************************************************************************************************************\
 * Sonar
 **********************************************************************************************************************/
subprojects {
    sonar {
        properties {
            property "sonar.coverage.jacoco.xmlReportPaths", "$projectDir.parentFile.path/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml"
        }
    }
}

sonar {
    properties {
        property "sonar.projectKey", "kestra-io_kestra"
        property "sonar.organization", "kestra-io"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

/**********************************************************************************************************************\
 * OWASP Dependency check
 **********************************************************************************************************************/
apply plugin: 'org.owasp.dependencycheck'

dependencyCheck {
    // fail only on HIGH and CRITICAL vulnerabilities, we may want to lower to 5 (mid-medium) later
    failBuildOnCVSS = 7

    // disable the .NET assembly analyzer as otherwise it wants to analyze EXE file
    analyzers {
        assemblyEnabled = false
    }

    // configure a suppression file
    suppressionFile = "$projectDir/owasp-dependency-suppressions.xml"
}

/**********************************************************************************************************************\
 * Micronaut
 **********************************************************************************************************************/
allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.encoding = "UTF-8"
            options.compilerArgs.add("-parameters")
            options.compilerArgs.add("-Xlint:all")
            options.compilerArgs.add("-Xlint:-processing")
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add("-parameters")
}

run.classpath += configurations.developmentOnly
test.classpath += configurations.developmentOnly

run.jvmArgs(
    "-noverify",
    "-XX:TieredStopAtLevel=1",
    "-Dcom.sun.management.jmxremote",
    '-Dmicronaut.environments=dev,override'
)

/**********************************************************************************************************************\
 * Jar
 **********************************************************************************************************************/
jar {
    manifest {
        attributes(
            "Main-Class": mainClassName,
            "X-Kestra-Name": project.name,
            "X-Kestra-Title": project.name,
            "X-Kestra-Group": project.group,
            "X-Kestra-Version": project.version
        )
    }
}

shadowJar {
    archiveClassifier.set(null)
    mergeServiceFiles()
    zip64 true
}

distZip.dependsOn shadowJar
distTar.dependsOn shadowJar
startScripts.dependsOn shadowJar
startShadowScripts.dependsOn jar
shadowJar.dependsOn 'ui:assembleFrontend'

/**********************************************************************************************************************\
 * Executable Jar
 **********************************************************************************************************************/
def executableDir = file("${buildDir}/executable")
def executable = file("${buildDir}/executable/${project.name}-${project.version}")

task writeExecutableJar() {
    group "build"
    description "Write an executable jar from shadow jar"
    dependsOn = [shadowJar]

    doFirst {
        executableDir.mkdirs()
    }

    doLast {
        executable.setBytes(file("${buildDir}/libs/${project.name}-${project.version}.jar").readBytes())
        ByteArrayOutputStream executableBytes = new ByteArrayOutputStream()
        executableBytes.write("\n: <<END_OF_KESTRA_SELFRUN\r\n".getBytes())
        executableBytes.write(file("gradle/jar/selfrun.bat").readBytes())
        executableBytes.write("\r\n".getBytes())
        executableBytes.write("END_OF_KESTRA_SELFRUN\r\n\n".getBytes())
        executableBytes.write(file("gradle/jar/selfrun.sh").readBytes())
        ZipPrefixer.applyPrefixBytesToZip(executable.toPath(), executableBytes.toByteArray())
        executable.setExecutable(true)
    }
}

task executableJar(type: Zip) {
    group "build"
    description "Zip the executable jar"
    dependsOn = [writeExecutableJar]

    archiveFileName = "${project.name}-${project.version}.zip"
    destinationDirectory = file("${buildDir}/archives")

    from executableDir
    archiveClassifier.set(null)
}

/**********************************************************************************************************************\
 * Standalone
 **********************************************************************************************************************/
task runLocal(type: JavaExec) {
    group = "application"
    classpath = project(":cli").sourceSets.main.runtimeClasspath
    mainClass = mainClassName
    environment 'MICRONAUT_ENVIRONMENTS', 'override'
    args 'server', 'local', '--plugins', 'local/plugins'
}

/**********************************************************************************************************************\
 * Publish
 **********************************************************************************************************************/
nexusPublishing {
    repositoryDescription = "${project.group}:${rootProject.name}:${project.version}"
    useStaging = !project.version.endsWith("-SNAPSHOT")
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

subprojects {
    apply plugin: "maven-publish"
    apply plugin: 'signing'
    apply plugin: 'ru.vyarus.pom'
    apply plugin: 'ru.vyarus.github-info'

    javadoc {
        options {
            locale = 'en_US'
            encoding = 'UTF-8'
            addStringOption("Xdoclint:none", "-quiet")
        }
    }

    task sourcesJar(type: Jar) {
        dependsOn = [':core:copyGradleProperties']
        dependsOn = [':ui:assembleFrontend']
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }
    sourcesJar.dependsOn ':core:copyGradleProperties'
    sourcesJar.dependsOn ':ui:assembleFrontend'

    task javadocJar(type: Jar) {
        archiveClassifier.set('javadoc')
        from javadoc
    }

    task testsJar(type: Jar) {
        archiveClassifier.set('tests')
        from sourceSets.test.output
    }

    github {
        user 'kestra-io'
        license 'Apache'
        repository 'kestra'
        site 'https://kestra.io'
    }

    maven.pom {
        description = 'The modern, scalable orchestrator & scheduler open source platform'

        developers {
            developer {
                id = "tchiotludo"
                name = "Ludovic Dehon"
            }
        }
    }

    publishing {
        publications {
            sonatypePublication(MavenPublication) {
                version project.version

                if (project.name.contains('cli')) {
                    groupId "io.kestra"
                    artifactId "kestra"

                    artifact shadowJar
                    artifact executableJar
                } else if (project.name.contains('platform')){
                    groupId project.group
                    artifactId project.name
                } else {
                    from components.java

                    groupId project.group
                    artifactId project.name

                    artifact sourcesJar
                    artifact javadocJar
                    artifact testsJar
                }
            }
        }
    }

    signing {
        // only sign JARs that we publish to Sonatype
        required { gradle.taskGraph.hasTask("publishSonatypePublicationPublicationToSonatypeRepository") }
        sign publishing.publications.sonatypePublication
    }

    tasks.withType(GenerateModuleMetadata).configureEach {
        // Suppression this validation error as we want to enforce the Kestra platform
        suppressedValidationErrors.add('enforced-platform')
    }
}


/**********************************************************************************************************************\
 * Version
 **********************************************************************************************************************/
release {
    preCommitText = 'chore(version):'
    preTagCommitMessage = 'update to version'
    tagCommitMessage = 'tag version'
    newVersionCommitMessage = 'update snapshot version'
    tagTemplate = 'v${version}'
    buildTasks = ['classes']

    git {
        requireBranch.set('develop')
    }
}
