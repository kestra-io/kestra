kestra:
  repository:
    type: memory
  queue:
    type: kafka
  storage:
    type: local
    local:
      base-path: /tmp/unittest

  prefix: "unit_kestra_${random.shortuuid}_"

  kafka:
    client:
      properties:
        bootstrap.servers: "localhost:9092"

    defaults:
      topic-prefix: "${kestra.prefix}"
      consumer-prefix: "${kestra.prefix}"
      topic:
        partitions: 8
        properties:
          compression.type: "lz4"

      consumer:
        properties:
          isolation.level: "read_committed"
          auto.offset.reset: "earliest"
          enable.auto.commit: "false"

      producer:
        properties:
          acks: "all"
          compression.type: "lz4"
          max.request.size: "10485760"

      stream:
        properties:
          processing.guarantee: "exactly_once_beta"
          acks: "all"
          compression.type: "lz4"
          max.request.size: "10485760"
          cache.max.bytes.buffering: 0
          state.dir: "/tmp/kafka-stream-unit/${kestra.prefix}"

    topics:
      execution:
        name: "${kestra.kafka.defaults.topic-prefix}execution"
        cls: io.kestra.core.models.executions.Execution
        properties:
          cleanup.policy: "compact"
          retention.ms: "-1"

      flow:
        name: "${kestra.kafka.defaults.topic-prefix}flow"
        cls: io.kestra.core.models.flows.Flow
        properties:
          cleanup.policy: "compact"
          retention.ms: "-1"
          segment.bytes: "10485760"

      flowlast:
        name: "${kestra.kafka.defaults.topic-prefix}flow_last"
        properties:
          cleanup.policy: "compact"
          retention.ms: "-1"
          segment.bytes: "10485760"

      template:
        name: "${kestra.kafka.defaults.topic-prefix}template"
        cls: io.kestra.core.models.templates.Template
        properties:
          cleanup.policy: "compact"
          retention.ms: "-1"
          segment.bytes: "10485760"

      executor:
        name: "${kestra.kafka.defaults.topic-prefix}executor-executor-changelog"
        cls: io.kestra.core.runners.Executor
        properties:
          cleanup.policy: "delete,compact"

      killed:
        name: "${kestra.kafka.defaults.topic-prefix}executor_killed"
        cls: io.kestra.core.models.executions.ExecutionKilled
        properties:
          cleanup.policy: "delete,compact"

      executorflowtrigger:
        name: "${kestra.kafka.defaults.topic-prefix}executor_flowtrigger"
        cls: io.kestra.runner.kafka.streams.ExecutorFlowTrigger
        properties:
          cleanup.policy: "delete,compact"

      workertask:
        name: "${kestra.kafka.defaults.topic-prefix}workertask"
        cls: io.kestra.core.runners.WorkerTask
        partitions: 64
        properties:
          cleanup.policy: "delete,compact"

      workertaskresult:
        name: "${kestra.kafka.defaults.topic-prefix}workertaskresult"
        cls: io.kestra.core.runners.WorkerTaskResult
        properties:
          cleanup.policy: "delete,compact"

      workerinstance:
        cls: io.kestra.core.runners.WorkerInstance
        name: "${kestra.kafka.defaults.topic-prefix}workerinstance"
        properties:
          cleanup.policy: "compact"

      executorworkerinstance:
        name: "${kestra.kafka.defaults.topic-prefix}executor_workerinstance"
        properties:
          cleanup.policy: "compact"

      workertaskrunning:
        cls: io.kestra.core.runners.WorkerTaskRunning
        name: "${kestra.kafka.defaults.topic-prefix}workertaskrunning"
        properties:
          cleanup.policy: "delete,compact"

      logentry:
        cls: io.kestra.core.models.executions.LogEntry
        name: "${kestra.kafka.defaults.topic-prefix}logs"

      trigger:
        cls: io.kestra.core.models.triggers.Trigger
        name: "${kestra.kafka.defaults.topic-prefix}trigger"
        properties:
          cleanup.policy: "compact"
